// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`tests/draft2020-12/additionalProperties.json additionalProperties being false does not allow other properties an additional property is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('quux' should not be defined but is 'boom')"`;

exports[`tests/draft2020-12/additionalProperties.json additionalProperties can exist by itself an additional invalid property is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a boolean but is an integer instead)"`;

exports[`tests/draft2020-12/additionalProperties.json additionalProperties does not look in applicators properties defined in allOf are not examined validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a boolean but is an integer instead)"`;

exports[`tests/draft2020-12/additionalProperties.json additionalProperties with schema an additional invalid property is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('quux' should be a boolean but is an integer instead)"`;

exports[`tests/draft2020-12/additionalProperties.json non-ASCII pattern with additionalProperties not matching the pattern is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('élmény' should not be defined but is 2)"`;

exports[`tests/draft2020-12/allOf.json allOf combined with anyOf, oneOf allOf: false, anyOf: false, oneOf: false validateJSON() returns correct error message 1`] = `"The value should be a multiple of 2 but is 1 instead, should validate against any subschema and should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/allOf.json allOf combined with anyOf, oneOf allOf: false, anyOf: false, oneOf: true validateJSON() returns correct error message 1`] = `"The value should be a multiple of 2 but is 5 instead and should validate against any subschema"`;

exports[`tests/draft2020-12/allOf.json allOf combined with anyOf, oneOf allOf: false, anyOf: true, oneOf: false validateJSON() returns correct error message 1`] = `"The value should be a multiple of 2 but is 3 instead and should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/allOf.json allOf combined with anyOf, oneOf allOf: false, anyOf: true, oneOf: true validateJSON() returns correct error message 1`] = `"The value should be a multiple of 2 but is 15 instead"`;

exports[`tests/draft2020-12/allOf.json allOf combined with anyOf, oneOf allOf: true, anyOf: false, oneOf: false validateJSON() returns correct error message 1`] = `"The value should validate against any subschema and should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/allOf.json allOf combined with anyOf, oneOf allOf: true, anyOf: false, oneOf: true validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/allOf.json allOf combined with anyOf, oneOf allOf: true, anyOf: true, oneOf: false validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/allOf.json allOf mismatch first validateJSON() returns correct error message 1`] = `"The value is missing 'foo'"`;

exports[`tests/draft2020-12/allOf.json allOf mismatch second validateJSON() returns correct error message 1`] = `"The value is missing 'bar'"`;

exports[`tests/draft2020-12/allOf.json allOf simple types mismatch one validateJSON() returns correct error message 1`] = `"The value should be less than or equal to 30 but is 35 instead"`;

exports[`tests/draft2020-12/allOf.json allOf with base schema mismatch base schema validateJSON() returns correct error message 1`] = `"The value is missing 'bar'"`;

exports[`tests/draft2020-12/allOf.json allOf with base schema mismatch both validateJSON() returns correct error message 1`] = `"The value is missing 'foo' and is missing 'baz'"`;

exports[`tests/draft2020-12/allOf.json allOf with base schema mismatch first allOf validateJSON() returns correct error message 1`] = `"The value is missing 'foo'"`;

exports[`tests/draft2020-12/allOf.json allOf with base schema mismatch second allOf validateJSON() returns correct error message 1`] = `"The value is missing 'baz'"`;

exports[`tests/draft2020-12/allOf.json allOf with boolean schemas, all false any value is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is 'foo' and should not be defined but is 'foo'"`;

exports[`tests/draft2020-12/allOf.json allOf with boolean schemas, some false any value is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is 'foo'"`;

exports[`tests/draft2020-12/allOf.json allOf with the first empty schema string is invalid validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/allOf.json allOf with the last empty schema string is invalid validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/allOf.json allOf wrong type validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/allOf.json nested allOf, to check validation semantics anything non-null is invalid validateJSON() returns correct error message 1`] = `"The value should be null but is an integer instead"`;

exports[`tests/draft2020-12/anchor.json $anchor inside an enum is not a real identifier in implementations that strip $anchor, this may match either $def validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/anchor.json $anchor inside an enum is not a real identifier no match on enum or $ref to $anchor validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/anchor.json Location-independent identifier mismatch validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/anchor.json Location-independent identifier with absolute URI mismatch validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/anchor.json Location-independent identifier with base URI change in subschema mismatch validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/anchor.json invalid anchors JSON pointers are not valid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$anchor' should match '^[A-Za-z_][-A-Za-z0-9._]*$' but is '/a/b' instead)"`;

exports[`tests/draft2020-12/anchor.json invalid anchors MUST start with a letter (and not #) validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$anchor' should match '^[A-Za-z_][-A-Za-z0-9._]*$' but is '#foo' instead)"`;

exports[`tests/draft2020-12/anchor.json invalid anchors invalid with valid beginning validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$anchor' should match '^[A-Za-z_][-A-Za-z0-9._]*$' but is 'foo#something' instead)"`;

exports[`tests/draft2020-12/anchor.json non-schema object containing an $anchor property const at const_not_anchor does not match validateJSON() returns correct error message 1`] = `"The value should be {"$anchor":"not_a_real_anchor"} but is 1 instead"`;

exports[`tests/draft2020-12/anchor.json same $anchor with different base uri $ref does not resolve to /$defs/A/allOf/0 validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/anyOf.json anyOf complex types neither anyOf valid (complex) validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/anyOf.json anyOf neither anyOf valid validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/anyOf.json anyOf with base schema both anyOf invalid validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/anyOf.json anyOf with base schema mismatch base schema validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/anyOf.json anyOf with boolean schemas, all false any value is invalid validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/anyOf.json nested anyOf, to check validation semantics anything non-null is invalid validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' array is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is ["foo"]"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' boolean false is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is false"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' boolean true is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is true"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' empty array is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is []"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' empty object is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is {}"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' null is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is null"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' number is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is 1"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' object is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is {"foo":"bar"}"`;

exports[`tests/draft2020-12/boolean_schema.json boolean schema 'false' string is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is 'foo'"`;

exports[`tests/draft2020-12/const.json const validation another type is invalid validateJSON() returns correct error message 1`] = `"The value should be 2 but is 'a' instead"`;

exports[`tests/draft2020-12/const.json const validation another value is invalid validateJSON() returns correct error message 1`] = `"The value should be 2 but is 5 instead"`;

exports[`tests/draft2020-12/const.json const with [false] does not match [0] [0.0] is invalid validateJSON() returns correct error message 1`] = `"The value should be [false] but is [0] instead"`;

exports[`tests/draft2020-12/const.json const with [false] does not match [0] [0] is invalid validateJSON() returns correct error message 1`] = `"The value should be [false] but is [0] instead"`;

exports[`tests/draft2020-12/const.json const with [true] does not match [1] [1.0] is invalid validateJSON() returns correct error message 1`] = `"The value should be [true] but is [1] instead"`;

exports[`tests/draft2020-12/const.json const with [true] does not match [1] [1] is invalid validateJSON() returns correct error message 1`] = `"The value should be [true] but is [1] instead"`;

exports[`tests/draft2020-12/const.json const with {"a": false} does not match {"a": 0} {"a": 0.0} is invalid validateJSON() returns correct error message 1`] = `"The value should be {"a":false} but is {"a":0} instead"`;

exports[`tests/draft2020-12/const.json const with {"a": false} does not match {"a": 0} {"a": 0} is invalid validateJSON() returns correct error message 1`] = `"The value should be {"a":false} but is {"a":0} instead"`;

exports[`tests/draft2020-12/const.json const with {"a": true} does not match {"a": 1} {"a": 1.0} is invalid validateJSON() returns correct error message 1`] = `"The value should be {"a":true} but is {"a":1} instead"`;

exports[`tests/draft2020-12/const.json const with {"a": true} does not match {"a": 1} {"a": 1} is invalid validateJSON() returns correct error message 1`] = `"The value should be {"a":true} but is {"a":1} instead"`;

exports[`tests/draft2020-12/const.json const with -2.0 matches integer and float types float -2.00001 is invalid validateJSON() returns correct error message 1`] = `"The value should be -2 but is -2.00001 instead"`;

exports[`tests/draft2020-12/const.json const with -2.0 matches integer and float types float 2.0 is invalid validateJSON() returns correct error message 1`] = `"The value should be -2 but is 2 instead"`;

exports[`tests/draft2020-12/const.json const with -2.0 matches integer and float types integer 2 is invalid validateJSON() returns correct error message 1`] = `"The value should be -2 but is 2 instead"`;

exports[`tests/draft2020-12/const.json const with 0 does not match other zero-like types empty array is invalid validateJSON() returns correct error message 1`] = `"The value should be 0 but is [] instead"`;

exports[`tests/draft2020-12/const.json const with 0 does not match other zero-like types empty object is invalid validateJSON() returns correct error message 1`] = `"The value should be 0 but is {} instead"`;

exports[`tests/draft2020-12/const.json const with 0 does not match other zero-like types empty string is invalid validateJSON() returns correct error message 1`] = `"The value should be 0 but is '' instead"`;

exports[`tests/draft2020-12/const.json const with 0 does not match other zero-like types false is invalid validateJSON() returns correct error message 1`] = `"The value should be 0 but is false instead"`;

exports[`tests/draft2020-12/const.json const with 1 does not match true true is invalid validateJSON() returns correct error message 1`] = `"The value should be 1 but is true instead"`;

exports[`tests/draft2020-12/const.json const with array another array item is invalid validateJSON() returns correct error message 1`] = `"The value should be [{"foo":"bar"}] but is [2] instead"`;

exports[`tests/draft2020-12/const.json const with array array with additional items is invalid validateJSON() returns correct error message 1`] = `"The value should be [{"foo":"bar"}] but is [1,2,3] instead"`;

exports[`tests/draft2020-12/const.json const with false does not match 0 float zero is invalid validateJSON() returns correct error message 1`] = `"The value should be false but is 0 instead"`;

exports[`tests/draft2020-12/const.json const with false does not match 0 integer zero is invalid validateJSON() returns correct error message 1`] = `"The value should be false but is 0 instead"`;

exports[`tests/draft2020-12/const.json const with null not null is invalid validateJSON() returns correct error message 1`] = `"The value should be null but is 0 instead"`;

exports[`tests/draft2020-12/const.json const with object another object is invalid validateJSON() returns correct error message 1`] = `"The value should be {"foo":"bar","baz":"bax"} but is {"foo":"bar"} instead"`;

exports[`tests/draft2020-12/const.json const with object another type is invalid validateJSON() returns correct error message 1`] = `"The value should be {"foo":"bar","baz":"bax"} but is [1,2] instead"`;

exports[`tests/draft2020-12/const.json const with true does not match 1 float one is invalid validateJSON() returns correct error message 1`] = `"The value should be true but is 1 instead"`;

exports[`tests/draft2020-12/const.json const with true does not match 1 integer one is invalid validateJSON() returns correct error message 1`] = `"The value should be true but is 1 instead"`;

exports[`tests/draft2020-12/const.json float and integers are equal up to 64-bit representation limits float minus one is invalid validateJSON() returns correct error message 1`] = `"The value should be 9007199254740992 but is 9007199254740991 instead"`;

exports[`tests/draft2020-12/const.json float and integers are equal up to 64-bit representation limits integer minus one is invalid validateJSON() returns correct error message 1`] = `"The value should be 9007199254740992 but is 9007199254740991 instead"`;

exports[`tests/draft2020-12/const.json nul characters in strings do not match string lacking nul validateJSON() returns correct error message 1`] = `"The value should be 'hello there' but is 'hellothere' instead"`;

exports[`tests/draft2020-12/contains.json contains keyword validation array without items matching schema is invalid validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json contains keyword validation empty array is invalid validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json contains keyword with boolean schema false any non-empty array is invalid validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json contains keyword with boolean schema false empty array is invalid validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json contains keyword with boolean schema true empty array is invalid validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json contains keyword with const keyword array without item 5 is invalid validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json contains with false if subschema empty array is invalid validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json items + contains does not match items, matches contains validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should be a multiple of 2 but is 3 instead and item at 2 should be a multiple of 2 but is 9 instead)"`;

exports[`tests/draft2020-12/contains.json items + contains matches items, does not match contains validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema"`;

exports[`tests/draft2020-12/contains.json items + contains matches neither items nor contains validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should be a multiple of 2 but is 1 instead and item at 1 should be a multiple of 2 but is 5 instead) and should have an item that validates against subschema"`;

exports[`tests/draft2020-12/default.json the default keyword does not do anything if the property is missing an explicit property value is checked against maximum (failing) validateJSON() returns correct error message 1`] = `"The value has an invalid property ('alpha' should be less than or equal to 3 but is 5 instead)"`;

exports[`tests/draft2020-12/defs.json validate definition against metaschema invalid definition schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('foo' has an invalid property ('type' should validate against any subschema)))"`;

exports[`tests/draft2020-12/dependentRequired.json dependencies with escaped characters CRLF missing dependent validateJSON() returns correct error message 1`] = `
"The value is mising 'foo
bar'"
`;

exports[`tests/draft2020-12/dependentRequired.json dependencies with escaped characters quoted quotes missing dependent validateJSON() returns correct error message 1`] = `"The value is mising 'foo'bar'"`;

exports[`tests/draft2020-12/dependentRequired.json multiple dependents required missing both dependencies validateJSON() returns correct error message 1`] = `"The value is mising 'foo' and 'bar'"`;

exports[`tests/draft2020-12/dependentRequired.json multiple dependents required missing dependency validateJSON() returns correct error message 1`] = `"The value is mising 'bar'"`;

exports[`tests/draft2020-12/dependentRequired.json multiple dependents required missing other dependency validateJSON() returns correct error message 1`] = `"The value is mising 'foo'"`;

exports[`tests/draft2020-12/dependentRequired.json single dependency missing dependency validateJSON() returns correct error message 1`] = `"The value is mising 'foo'"`;

exports[`tests/draft2020-12/dependentSchemas.json boolean subschemas object with both properties is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is {"foo":1,"bar":2}"`;

exports[`tests/draft2020-12/dependentSchemas.json boolean subschemas object with property having schema false is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is {"bar":2}"`;

exports[`tests/draft2020-12/dependentSchemas.json dependencies with escaped characters quoted quote invalid under dependent schema validateJSON() returns correct error message 1`] = `"The value is missing 'foo"bar'"`;

exports[`tests/draft2020-12/dependentSchemas.json dependencies with escaped characters quoted quote validateJSON() returns correct error message 1`] = `"The value is missing 'foo"bar'"`;

exports[`tests/draft2020-12/dependentSchemas.json dependencies with escaped characters quoted tab invalid under dependent schema validateJSON() returns correct error message 1`] = `"The value should have at least 4 properties but has 2 instead"`;

exports[`tests/draft2020-12/dependentSchemas.json dependent subschema incompatible with root matches both validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 1)"`;

exports[`tests/draft2020-12/dependentSchemas.json dependent subschema incompatible with root matches root validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 1)"`;

exports[`tests/draft2020-12/dependentSchemas.json single dependency wrong type both validateJSON() returns correct error message 1`] = `"The value has invalid properties ('foo' should be an integer but is a string instead and 'bar' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/dependentSchemas.json single dependency wrong type other validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/dependentSchemas.json single dependency wrong type validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/dynamicRef.json $ref and $dynamicAnchor are independent of order - $defs first incorrect extended schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('elements' has invalid item (item at 0 has an invalid property ('b' should not be defined but is 1) and is missing 'a'))"`;

exports[`tests/draft2020-12/dynamicRef.json $ref and $dynamicAnchor are independent of order - $defs first incorrect parent schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('a' should not be defined but is true) and is missing 'elements'"`;

exports[`tests/draft2020-12/dynamicRef.json $ref and $dynamicAnchor are independent of order - $ref first incorrect extended schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('elements' has invalid item (item at 0 has an invalid property ('b' should not be defined but is 1) and is missing 'a'))"`;

exports[`tests/draft2020-12/dynamicRef.json $ref and $dynamicAnchor are independent of order - $ref first incorrect parent schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('a' should not be defined but is true) and is missing 'elements'"`;

exports[`tests/draft2020-12/dynamicRef.json $ref to $dynamicRef finds detached $dynamicAnchor non-number is invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/dynamicRef.json A $dynamicRef resolves to the first $dynamicAnchor still in scope that is encountered when the schema is evaluated An array containing non-strings is invalid validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/dynamicRef.json A $dynamicRef that initially resolves to a schema with a matching $dynamicAnchor resolves to the first $dynamicAnchor in the dynamic scope The recursive part is not valid against the root validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' has an invalid property ('baz' has an invalid property ('foo' should be 'pass' but is 'fail' instead)))"`;

exports[`tests/draft2020-12/dynamicRef.json A $dynamicRef to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor An array containing non-strings is invalid validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/dynamicRef.json A $dynamicRef to an $anchor in the same schema resource behaves like a normal $ref to an $anchor An array containing non-strings is invalid validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/dynamicRef.json A $dynamicRef with intermediate scopes that don't include a matching $dynamicAnchor does not affect dynamic scope resolution An array containing non-strings is invalid validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/dynamicRef.json A $dynamicRef without anchor in fragment behaves identical to $ref An array of strings is invalid validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should be a number but is a string instead and item at 1 should be a number but is a string instead)"`;

exports[`tests/draft2020-12/dynamicRef.json A $ref to a $dynamicAnchor in the same schema resource behaves like a normal $ref to an $anchor An array containing non-strings is invalid validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/dynamicRef.json after leaving a dynamic scope, it is not used by a $dynamicRef first_scope is not in dynamic scope for the $dynamicRef validateJSON() returns correct error message 1`] = `"The value should be null but is an integer instead"`;

exports[`tests/draft2020-12/dynamicRef.json after leaving a dynamic scope, it is not used by a $dynamicRef string matches /$defs/thingy, but the $dynamicRef does not stop here validateJSON() returns correct error message 1`] = `"The value should be null but is a string instead"`;

exports[`tests/draft2020-12/dynamicRef.json multiple dynamic paths to the $dynamicRef keyword number list with string values validateJSON() returns correct error message 1`] = `"The value has an invalid property ('list' has invalid item (item at 0 should be a number but is a string instead))"`;

exports[`tests/draft2020-12/dynamicRef.json multiple dynamic paths to the $dynamicRef keyword string list with number values validateJSON() returns correct error message 1`] = `"The value has an invalid property ('list' has invalid item (item at 0 should be a string but is a number instead))"`;

exports[`tests/draft2020-12/dynamicRef.json strict-tree schema, guards against misspelled properties instance with misspelled field validateJSON() returns correct error message 1`] = `"The value has an invalid property ('children' has invalid item (item at 0 has an invalid property ('daat' should not be defined but is 1))) and has an invalid property ('children' should not be defined but is [{"daat":1}])"`;

exports[`tests/draft2020-12/dynamicRef.json tests for implementation dynamic anchor and reference link incorrect extended schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('elements' has invalid item (item at 0 has an invalid property ('b' should not be defined but is 1) and is missing 'a'))"`;

exports[`tests/draft2020-12/dynamicRef.json tests for implementation dynamic anchor and reference link incorrect parent schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('a' should not be defined but is true) and is missing 'elements'"`;

exports[`tests/draft2020-12/enum.json enum with 0 does not match false false is invalid validateJSON() returns correct error message 1`] = `"The value should be 0 but is false instead"`;

exports[`tests/draft2020-12/enum.json enum with 1 does not match true true is invalid validateJSON() returns correct error message 1`] = `"The value should be 1 but is true instead"`;

exports[`tests/draft2020-12/enum.json enum with escaped characters another string is invalid validateJSON() returns correct error message 1`] = `
"The value should be one of 'foo
bar' or 'foo
bar' but is 'abc' instead"
`;

exports[`tests/draft2020-12/enum.json enum with false does not match 0 float zero is invalid validateJSON() returns correct error message 1`] = `"The value should be false but is 0 instead"`;

exports[`tests/draft2020-12/enum.json enum with false does not match 0 integer zero is invalid validateJSON() returns correct error message 1`] = `"The value should be false but is 0 instead"`;

exports[`tests/draft2020-12/enum.json enum with true does not match 1 float one is invalid validateJSON() returns correct error message 1`] = `"The value should be true but is 1 instead"`;

exports[`tests/draft2020-12/enum.json enum with true does not match 1 integer one is invalid validateJSON() returns correct error message 1`] = `"The value should be true but is 1 instead"`;

exports[`tests/draft2020-12/enum.json enums in properties missing all properties is invalid validateJSON() returns correct error message 1`] = `"The value is missing 'bar'"`;

exports[`tests/draft2020-12/enum.json enums in properties missing required property is invalid validateJSON() returns correct error message 1`] = `"The value is missing 'bar'"`;

exports[`tests/draft2020-12/enum.json enums in properties wrong bar value validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be 'bar' but is 'bart' instead)"`;

exports[`tests/draft2020-12/enum.json enums in properties wrong foo value validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be 'foo' but is 'foot' instead)"`;

exports[`tests/draft2020-12/enum.json heterogeneous enum validation extra properties in object is invalid validateJSON() returns correct error message 1`] = `"The value should be one of 6, 'foo', [], true or {"foo":12} but is {"foo":12,"boo":42} instead"`;

exports[`tests/draft2020-12/enum.json heterogeneous enum validation objects are deep compared validateJSON() returns correct error message 1`] = `"The value should be one of 6, 'foo', [], true or {"foo":12} but is {"foo":false} instead"`;

exports[`tests/draft2020-12/enum.json heterogeneous enum validation something else is invalid validateJSON() returns correct error message 1`] = `"The value should be one of 6, 'foo', [], true or {"foo":12} but is null instead"`;

exports[`tests/draft2020-12/enum.json heterogeneous enum-with-null validation something else is invalid validateJSON() returns correct error message 1`] = `"The value should be one of 6 or null but is 'test' instead"`;

exports[`tests/draft2020-12/enum.json nul characters in strings do not match string lacking nul validateJSON() returns correct error message 1`] = `"The value should be 'hello there' but is 'hellothere' instead"`;

exports[`tests/draft2020-12/enum.json simple enum validation something else is invalid validateJSON() returns correct error message 1`] = `"The value should be one of 1, 2 or 3 but is 4 instead"`;

exports[`tests/draft2020-12/exclusiveMaximum.json exclusiveMaximum validation above the exclusiveMaximum is invalid validateJSON() returns correct error message 1`] = `"The value should be less than 3 but is 3.5 instead"`;

exports[`tests/draft2020-12/exclusiveMaximum.json exclusiveMaximum validation boundary point is invalid validateJSON() returns correct error message 1`] = `"The value should be less than 3 but is 3 instead"`;

exports[`tests/draft2020-12/exclusiveMinimum.json exclusiveMinimum validation below the exclusiveMinimum is invalid validateJSON() returns correct error message 1`] = `"The value should be greater than 1.1 but is 0.6 instead"`;

exports[`tests/draft2020-12/exclusiveMinimum.json exclusiveMinimum validation boundary point is invalid validateJSON() returns correct error message 1`] = `"The value should be greater than 1.1 but is 1.1 instead"`;

exports[`tests/draft2020-12/id.json $id inside an enum is not a real identifier no match on enum or $ref to $id validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/id.json Invalid use of fragments in location-independent $id Identifier name and no ref validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('A' has an invalid property ('$id' should match '^[^#]*#?$' but is '#foo' instead)))"`;

exports[`tests/draft2020-12/id.json Invalid use of fragments in location-independent $id Identifier name validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('A' has an invalid property ('$id' should match '^[^#]*#?$' but is '#foo' instead)))"`;

exports[`tests/draft2020-12/id.json Invalid use of fragments in location-independent $id Identifier name with absolute URI validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('A' has an invalid property ('$id' should match '^[^#]*#?$' but is 'http://localhost:1234/draft2020-12/bar#foo' instead)))"`;

exports[`tests/draft2020-12/id.json Invalid use of fragments in location-independent $id Identifier name with base URI change in subschema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('A' has an invalid property ('$defs' has an invalid property ('B' has an invalid property ('$id' should match '^[^#]*#?$' but is '#foo' instead)))))"`;

exports[`tests/draft2020-12/id.json Invalid use of fragments in location-independent $id Identifier path validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('A' has an invalid property ('$id' should match '^[^#]*#?$' but is '#/a/b' instead)))"`;

exports[`tests/draft2020-12/id.json Invalid use of fragments in location-independent $id Identifier path with absolute URI validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('A' has an invalid property ('$id' should match '^[^#]*#?$' but is 'http://localhost:1234/draft2020-12/bar#/a/b' instead)))"`;

exports[`tests/draft2020-12/id.json Invalid use of fragments in location-independent $id Identifier path with base URI change in subschema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$defs' has an invalid property ('A' has an invalid property ('$defs' has an invalid property ('B' has an invalid property ('$id' should match '^[^#]*#?$' but is '#/a/b' instead)))))"`;

exports[`tests/draft2020-12/id.json non-schema object containing an $id property const at const_not_id does not match validateJSON() returns correct error message 1`] = `"The value should be {"$id":"not_a_real_id"} but is 1 instead"`;

exports[`tests/draft2020-12/if-then-else.json if and else without then invalid through else validateJSON() returns correct error message 1`] = `"The value should be a multiple of 2 but is 3 instead"`;

exports[`tests/draft2020-12/if-then-else.json if and then without else invalid through then validateJSON() returns correct error message 1`] = `"The value should be greater than or equal to -10 but is -100 instead"`;

exports[`tests/draft2020-12/if-then-else.json if appears at the end when serialized (keyword processing sequence) invalid redirects to else and fails validateJSON() returns correct error message 1`] = `"The value should be 'other' but is 'invalid' instead"`;

exports[`tests/draft2020-12/if-then-else.json if appears at the end when serialized (keyword processing sequence) no redirects to then and fails validateJSON() returns correct error message 1`] = `"The value should be 'yes' but is 'no' instead"`;

exports[`tests/draft2020-12/if-then-else.json if with boolean schema false boolean schema false in if always chooses the else path (invalid) validateJSON() returns correct error message 1`] = `"The value should be 'else' but is 'then' instead"`;

exports[`tests/draft2020-12/if-then-else.json if with boolean schema true boolean schema true in if always chooses the then path (invalid) validateJSON() returns correct error message 1`] = `"The value should be 'then' but is 'else' instead"`;

exports[`tests/draft2020-12/if-then-else.json validate against correct branch, then vs else invalid through else validateJSON() returns correct error message 1`] = `"The value should be a multiple of 2 but is 3 instead"`;

exports[`tests/draft2020-12/if-then-else.json validate against correct branch, then vs else invalid through then validateJSON() returns correct error message 1`] = `"The value should be greater than or equal to -10 but is -100 instead"`;

exports[`tests/draft2020-12/infinite-loop-detection.json evaluating the same schema location against the same data location twice is not a sign of an infinite loop failing case validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be an integer but is a string instead) and has an invalid property ('foo' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/items.json a schema given for items wrong type of items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/items.json items and subitems too many items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 3 should not be defined but is [{"foo":null},{"foo":null}])"`;

exports[`tests/draft2020-12/items.json items and subitems too many sub-items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 has invalid item (item at 2 should not be defined but is {"foo":null}))"`;

exports[`tests/draft2020-12/items.json items and subitems wrong item validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should be an array but is an object instead)"`;

exports[`tests/draft2020-12/items.json items and subitems wrong sub-item validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 has invalid item (item at 0 is missing 'foo'))"`;

exports[`tests/draft2020-12/items.json items does not look in applicators, valid case prefixItems in allOf does not constrain items, invalid case validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should be greater than or equal to 5 but is 3 instead)"`;

exports[`tests/draft2020-12/items.json items with boolean schema (false) any non-empty array is invalid validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should not be defined but is 1, item at 1 should not be defined but is 'foo' and item at 2 should not be defined but is true)"`;

exports[`tests/draft2020-12/items.json nested items nested array with invalid type validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 has invalid item (item at 0 has invalid item (item at 0 has invalid item (item at 0 should be a number but is a string instead))))"`;

exports[`tests/draft2020-12/items.json nested items not deep enough validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 has invalid items (item at 0 has invalid item (item at 0 should be an array but is an integer instead), item at 1 has invalid item (item at 0 should be an array but is an integer instead) and item at 2 has invalid item (item at 0 should be an array but is an integer instead)) and item at 1 has invalid items (item at 0 has invalid item (item at 0 should be an array but is an integer instead), item at 1 has invalid item (item at 0 should be an array but is an integer instead) and item at 2 has invalid item (item at 0 should be an array but is an integer instead)))"`;

exports[`tests/draft2020-12/items.json prefixItems validation adjusts the starting index for items wrong type of second item validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/items.json prefixItems with no additional items allowed additional items are not permitted validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 3 should not be defined but is 4)"`;

exports[`tests/draft2020-12/maxContains.json maxContains with contains all elements match, invalid maxContains validateJSON() returns correct error message 1`] = `"The value should have up to 1 item that validate against subschema but has 2 at 0 and 1 instead"`;

exports[`tests/draft2020-12/maxContains.json maxContains with contains empty data validateJSON() returns correct error message 1`] = `"Cannot read properties of undefined (reading 'length')"`;

exports[`tests/draft2020-12/maxContains.json maxContains with contains some elements match, invalid maxContains validateJSON() returns correct error message 1`] = `"The value should have up to 1 item that validate against subschema but has 2 at 0 and 2 instead"`;

exports[`tests/draft2020-12/maxContains.json maxContains with contains, value with a decimal too many elements match, invalid maxContains validateJSON() returns correct error message 1`] = `"The value should have up to 1 item that validate against subschema but has 2 at 0 and 1 instead"`;

exports[`tests/draft2020-12/maxContains.json minContains < maxContains actual < minContains < maxContains validateJSON() returns correct error message 1`] = `"Cannot read properties of undefined (reading 'length')"`;

exports[`tests/draft2020-12/maxContains.json minContains < maxContains minContains < maxContains < actual validateJSON() returns correct error message 1`] = `"The value should have up to 3 items that validate against subschema but has 4 at 0, 1, 2 and 3 instead"`;

exports[`tests/draft2020-12/maxItems.json maxItems validation too long is invalid validateJSON() returns correct error message 1`] = `"The value should have up to 2 items but has 3 instead"`;

exports[`tests/draft2020-12/maxItems.json maxItems validation with a decimal too long is invalid validateJSON() returns correct error message 1`] = `"The value should have up to 2 items but has 3 instead"`;

exports[`tests/draft2020-12/maxLength.json maxLength validation too long is invalid validateJSON() returns correct error message 1`] = `"The value should have up to 2 characters but has 3 instead"`;

exports[`tests/draft2020-12/maxLength.json maxLength validation with a decimal too long is invalid validateJSON() returns correct error message 1`] = `"The value should have up to 2 characters but has 3 instead"`;

exports[`tests/draft2020-12/maxProperties.json maxProperties = 0 means the object is empty one property is invalid validateJSON() returns correct error message 1`] = `"The value should have up to 0 properties but has 1 instead"`;

exports[`tests/draft2020-12/maxProperties.json maxProperties validation too long is invalid validateJSON() returns correct error message 1`] = `"The value should have up to 2 properties but has 3 instead"`;

exports[`tests/draft2020-12/maxProperties.json maxProperties validation with a decimal too long is invalid validateJSON() returns correct error message 1`] = `"The value should have up to 2 properties but has 3 instead"`;

exports[`tests/draft2020-12/maximum.json maximum validation above the maximum is invalid validateJSON() returns correct error message 1`] = `"The value should be less than or equal to 3 but is 3.5 instead"`;

exports[`tests/draft2020-12/maximum.json maximum validation with unsigned integer above the maximum is invalid validateJSON() returns correct error message 1`] = `"The value should be less than or equal to 300 but is 300.5 instead"`;

exports[`tests/draft2020-12/minContains.json maxContains < minContains empty data validateJSON() returns correct error message 1`] = `"Cannot read properties of undefined (reading 'length')"`;

exports[`tests/draft2020-12/minContains.json maxContains < minContains invalid maxContains and minContains validateJSON() returns correct error message 1`] = `"The value should have up to 1 item that validate against subschema but has 2 at 0 and 1 instead and should have at least 3 items that validate against subschema but has 2 at 0 and 1 instead"`;

exports[`tests/draft2020-12/minContains.json maxContains < minContains invalid maxContains validateJSON() returns correct error message 1`] = `"The value should have up to 1 item that validate against subschema but has 3 at 0, 1 and 2 instead"`;

exports[`tests/draft2020-12/minContains.json maxContains < minContains invalid minContains validateJSON() returns correct error message 1`] = `"The value should have at least 3 items that validate against subschema but has 1 at 0 instead"`;

exports[`tests/draft2020-12/minContains.json maxContains = minContains all elements match, invalid maxContains validateJSON() returns correct error message 1`] = `"The value should have up to 2 items that validate against subschema but has 3 at 0, 1 and 2 instead"`;

exports[`tests/draft2020-12/minContains.json maxContains = minContains all elements match, invalid minContains validateJSON() returns correct error message 1`] = `"The value should have at least 2 items that validate against subschema but has 1 at 0 instead"`;

exports[`tests/draft2020-12/minContains.json maxContains = minContains empty data validateJSON() returns correct error message 1`] = `"Cannot read properties of undefined (reading 'length')"`;

exports[`tests/draft2020-12/minContains.json minContains = 0 with maxContains too many validateJSON() returns correct error message 1`] = `"The value should have up to 1 item that validate against subschema but has 2 at 0 and 1 instead"`;

exports[`tests/draft2020-12/minContains.json minContains=1 with contains empty data validateJSON() returns correct error message 1`] = `"Cannot read properties of undefined (reading 'length')"`;

exports[`tests/draft2020-12/minContains.json minContains=1 with contains no elements match validateJSON() returns correct error message 1`] = `"Cannot read properties of undefined (reading 'length')"`;

exports[`tests/draft2020-12/minContains.json minContains=2 with contains all elements match, invalid minContains validateJSON() returns correct error message 1`] = `"The value should have at least 2 items that validate against subschema but has 1 at 0 instead"`;

exports[`tests/draft2020-12/minContains.json minContains=2 with contains empty data validateJSON() returns correct error message 1`] = `"Cannot read properties of undefined (reading 'length')"`;

exports[`tests/draft2020-12/minContains.json minContains=2 with contains some elements match, invalid minContains validateJSON() returns correct error message 1`] = `"The value should have at least 2 items that validate against subschema but has 1 at 0 instead"`;

exports[`tests/draft2020-12/minContains.json minContains=2 with contains with a decimal value one element matches, invalid minContains validateJSON() returns correct error message 1`] = `"The value should have at least 2 items that validate against subschema but has 1 at 0 instead"`;

exports[`tests/draft2020-12/minItems.json minItems validation too short is invalid validateJSON() returns correct error message 1`] = `"The value should have at least 1 item but has 0 instead"`;

exports[`tests/draft2020-12/minItems.json minItems validation with a decimal too short is invalid validateJSON() returns correct error message 1`] = `"The value should have at least 1 item but has 0 instead"`;

exports[`tests/draft2020-12/minLength.json minLength validation one supplementary Unicode code point is not long enough validateJSON() returns correct error message 1`] = `"The value should have at least 2 characters but has 1 instead"`;

exports[`tests/draft2020-12/minLength.json minLength validation too short is invalid validateJSON() returns correct error message 1`] = `"The value should have at least 2 characters but has 1 instead"`;

exports[`tests/draft2020-12/minLength.json minLength validation with a decimal too short is invalid validateJSON() returns correct error message 1`] = `"The value should have at least 2 characters but has 1 instead"`;

exports[`tests/draft2020-12/minProperties.json minProperties validation too short is invalid validateJSON() returns correct error message 1`] = `"The value should have at least 1 property but has 0 instead"`;

exports[`tests/draft2020-12/minProperties.json minProperties validation with a decimal too short is invalid validateJSON() returns correct error message 1`] = `"The value should have at least 1 property but has 0 instead"`;

exports[`tests/draft2020-12/minimum.json minimum validation below the minimum is invalid validateJSON() returns correct error message 1`] = `"The value should be greater than or equal to 1.1 but is 0.6 instead"`;

exports[`tests/draft2020-12/minimum.json minimum validation with signed integer float below the minimum is invalid validateJSON() returns correct error message 1`] = `"The value should be greater than or equal to -2 but is -2.0001 instead"`;

exports[`tests/draft2020-12/minimum.json minimum validation with signed integer int below the minimum is invalid validateJSON() returns correct error message 1`] = `"The value should be greater than or equal to -2 but is -3 instead"`;

exports[`tests/draft2020-12/multipleOf.json by int int by int fail validateJSON() returns correct error message 1`] = `"The value should be a multiple of 2 but is 7 instead"`;

exports[`tests/draft2020-12/multipleOf.json by number 35 is not multiple of 1.5 validateJSON() returns correct error message 1`] = `"The value should be a multiple of 1.5 but is 35 instead"`;

exports[`tests/draft2020-12/multipleOf.json by small number 0.00751 is not multiple of 0.0001 validateJSON() returns correct error message 1`] = `"The value should be a multiple of 0.0001 but is 0.00751 instead"`;

exports[`tests/draft2020-12/multipleOf.json float division = inf always invalid, but naive implementations may raise an overflow error validateJSON() returns correct error message 1`] = `"The value should be a multiple of 0.123456789 but is 1e+308 instead"`;

exports[`tests/draft2020-12/not.json collect annotations inside a 'not', even if collection is disabled annotations are still collected inside a 'not' validateJSON() returns correct error message 1`] = `"The value should not validate against subschema"`;

exports[`tests/draft2020-12/not.json forbidden property property present validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not validate against subschema)"`;

exports[`tests/draft2020-12/not.json not disallowed validateJSON() returns correct error message 1`] = `"The value should not validate against subschema"`;

exports[`tests/draft2020-12/not.json not more complex schema mismatch validateJSON() returns correct error message 1`] = `"The value should not validate against subschema"`;

exports[`tests/draft2020-12/not.json not multiple types mismatch validateJSON() returns correct error message 1`] = `"The value should not validate against subschema"`;

exports[`tests/draft2020-12/not.json not multiple types other mismatch validateJSON() returns correct error message 1`] = `"The value should not validate against subschema"`;

exports[`tests/draft2020-12/not.json not with boolean schema true any value is invalid validateJSON() returns correct error message 1`] = `"The value should not validate against subschema"`;

exports[`tests/draft2020-12/oneOf.json nested oneOf, to check validation semantics anything non-null is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/oneOf.json oneOf both oneOf valid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2"`;

exports[`tests/draft2020-12/oneOf.json oneOf complex types both oneOf valid (complex) validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2"`;

exports[`tests/draft2020-12/oneOf.json oneOf complex types neither oneOf valid (complex) validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/oneOf.json oneOf neither oneOf valid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/oneOf.json oneOf with base schema both oneOf valid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2"`;

exports[`tests/draft2020-12/oneOf.json oneOf with base schema mismatch base schema validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and should be a string but is an integer instead"`;

exports[`tests/draft2020-12/oneOf.json oneOf with boolean schemas, all false any value is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/oneOf.json oneOf with boolean schemas, all true any value is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 3"`;

exports[`tests/draft2020-12/oneOf.json oneOf with boolean schemas, more than one true any value is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2"`;

exports[`tests/draft2020-12/oneOf.json oneOf with empty schema both valid - invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2"`;

exports[`tests/draft2020-12/oneOf.json oneOf with missing optional property both oneOf valid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2"`;

exports[`tests/draft2020-12/oneOf.json oneOf with missing optional property neither oneOf valid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/oneOf.json oneOf with required both invalid - invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/oneOf.json oneOf with required both valid - invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2"`;

exports[`tests/draft2020-12/pattern.json pattern validation a non-matching pattern is invalid validateJSON() returns correct error message 1`] = `"The value should match '^a*$' but is 'abc' instead"`;

exports[`tests/draft2020-12/patternProperties.json multiple simultaneous patternProperties are validated an invalid due to both is invalid validateJSON() returns correct error message 1`] = `"The value has invalid properties ('aaa' should be an integer but is a string instead and 'aaaa' should be less than or equal to 20 but is 31 instead)"`;

exports[`tests/draft2020-12/patternProperties.json multiple simultaneous patternProperties are validated an invalid due to one is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('a' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/patternProperties.json multiple simultaneous patternProperties are validated an invalid due to the other is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('aaaa' should be less than or equal to 20 but is 31 instead)"`;

exports[`tests/draft2020-12/patternProperties.json patternProperties validates properties matching a regex a single invalid match is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/patternProperties.json patternProperties validates properties matching a regex multiple invalid matches is invalid validateJSON() returns correct error message 1`] = `"The value has invalid properties ('foo' should be an integer but is a string instead and 'foooooo' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/patternProperties.json patternProperties with boolean schemas object with a property matching both true and false is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foobar' should not be defined but is 1)"`;

exports[`tests/draft2020-12/patternProperties.json patternProperties with boolean schemas object with both properties is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 2)"`;

exports[`tests/draft2020-12/patternProperties.json patternProperties with boolean schemas object with property matching schema false is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 2)"`;

exports[`tests/draft2020-12/patternProperties.json regexes are not anchored by default and are case sensitive recognized members are accounted for validateJSON() returns correct error message 1`] = `"The value has an invalid property ('a31b' should be a boolean but is null instead)"`;

exports[`tests/draft2020-12/patternProperties.json regexes are not anchored by default and are case sensitive regexes are case sensitive, 2 validateJSON() returns correct error message 1`] = `"The value has an invalid property ('a_X_3' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/prefixItems.json a schema given for prefixItems wrong types validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should be an integer but is a string instead and item at 1 should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/prefixItems.json prefixItems with boolean schemas array with two items is invalid validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should not be defined but is 'foo')"`;

exports[`tests/draft2020-12/properties.json object properties validation both properties invalid is invalid validateJSON() returns correct error message 1`] = `"The value has invalid properties ('foo' should be an integer but is an array instead and 'bar' should be a string but is an object instead)"`;

exports[`tests/draft2020-12/properties.json object properties validation one property invalid is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be a string but is an object instead)"`;

exports[`tests/draft2020-12/properties.json properties whose names are Javascript object property names __proto__ not valid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('__proto__' should be a number but is a string instead)"`;

exports[`tests/draft2020-12/properties.json properties whose names are Javascript object property names constructor not valid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('constructor' should be a number but is an object instead)"`;

exports[`tests/draft2020-12/properties.json properties whose names are Javascript object property names toString not valid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('toString' has an invalid property ('length' should be a string but is an integer instead))"`;

exports[`tests/draft2020-12/properties.json properties with boolean schema both properties present is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 2)"`;

exports[`tests/draft2020-12/properties.json properties with boolean schema only 'false' property present is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 2)"`;

exports[`tests/draft2020-12/properties.json properties with escaped characters object with strings is invalid validateJSON() returns correct error message 1`] = `
"The value has invalid properties ('foo
bar' should be a number but is a string instead, 'foo"bar' should be a number but is a string instead, 'foo\\bar' should be a number but is a string instead, 'foo
bar' should be a number but is a string instead, 'foo	bar' should be a number but is a string instead and 'foobar' should be a number but is a string instead)"
`;

exports[`tests/draft2020-12/properties.json properties, patternProperties, additionalProperties interaction additionalProperty invalidates others validateJSON() returns correct error message 1`] = `"The value has an invalid property ('quux' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/properties.json properties, patternProperties, additionalProperties interaction patternProperty invalidates nonproperty validateJSON() returns correct error message 1`] = `"The value has an invalid property ('fxo' should have at least 2 items but has 0 instead)"`;

exports[`tests/draft2020-12/properties.json properties, patternProperties, additionalProperties interaction patternProperty invalidates property validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should have at least 2 items but has 0 instead)"`;

exports[`tests/draft2020-12/properties.json properties, patternProperties, additionalProperties interaction property invalidates property validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should have up to 3 items but has 4 instead)"`;

exports[`tests/draft2020-12/propertyNames.json propertyNames validation some property names invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property name ('foobar' should have up to 3 characters but has 6 instead)"`;

exports[`tests/draft2020-12/propertyNames.json propertyNames with boolean schema false object with any properties is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property name ('foo' should not be defined but is 'foo')"`;

exports[`tests/draft2020-12/ref.json $id must be resolved against nearest parent, not just immediate parent non-number is invalid validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/ref.json $id with file URI still resolves pointers - *nix non-number is invalid validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/ref.json $id with file URI still resolves pointers - windows non-number is invalid validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/ref.json $ref to boolean schema false any value is invalid validateJSON() returns correct error message 1`] = `"The value should not be defined but is 'foo'"`;

exports[`tests/draft2020-12/ref.json Recursive references between schemas invalid tree validateJSON() returns correct error message 1`] = `"The value has an invalid property ('nodes' has invalid item (item at 0 has an invalid property ('subtree' has an invalid property ('nodes' has invalid item (item at 0 has an invalid property ('value' should be a number but is a string instead))))))"`;

exports[`tests/draft2020-12/ref.json URN base URI with NSS a non-string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json URN base URI with URN and JSON pointer ref a non-string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json URN base URI with URN and anchor ref a non-string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json URN base URI with f-component is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$id' should match '^[^#]*#?$' but is 'urn:example:foo-bar-baz-qux#somepart' instead)"`;

exports[`tests/draft2020-12/ref.json URN base URI with q-component a non-string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json URN base URI with r-component a non-string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json URN ref with nested pointer ref a non-string is invalid validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/ref.json empty tokens in $ref json-pointer non-number is invalid validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/ref.json escaped pointer ref percent invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('percent' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/ref.json escaped pointer ref slash invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('slash' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/ref.json escaped pointer ref tilde invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('tilde' should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/ref.json naive replacement of $ref with its destination is not correct do not evaluate the $ref inside the enum, definition exact match validateJSON() returns correct error message 1`] = `"The value should be {"$ref":"#/$defs/a_string"} but is {"type":"string"} instead"`;

exports[`tests/draft2020-12/ref.json naive replacement of $ref with its destination is not correct do not evaluate the $ref inside the enum, matching any string validateJSON() returns correct error message 1`] = `"The value should be {"$ref":"#/$defs/a_string"} but is 'this is a string' instead"`;

exports[`tests/draft2020-12/ref.json nested refs nested ref invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/ref.json order of evaluation: $id and $anchor and $ref data is invalid against first definition validateJSON() returns correct error message 1`] = `"The value should be less than or equal to 10 but is 50 instead"`;

exports[`tests/draft2020-12/ref.json order of evaluation: $id and $ref data is invalid against first definition validateJSON() returns correct error message 1`] = `"The value should be less than or equal to 10 but is 50 instead"`;

exports[`tests/draft2020-12/ref.json property named $ref that is not a reference property named $ref invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$ref' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json property named $ref, containing an actual $ref property named $ref invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('$ref' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json ref applies alongside sibling keywords ref invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be an array but is a string instead)"`;

exports[`tests/draft2020-12/ref.json ref applies alongside sibling keywords ref valid, maxItems invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should have up to 2 items but has 3 instead)"`;

exports[`tests/draft2020-12/ref.json ref creates new scope when adjacent to keywords referenced subschema doesn't see annotations from properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('prop1' should not be defined but is 'match')"`;

exports[`tests/draft2020-12/ref.json ref to else a non-integer is invalid due to the $ref validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/ref.json ref to if a non-integer is invalid due to the $ref validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/ref.json ref to then a non-integer is invalid due to the $ref validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/ref.json ref with absolute-path-reference an integer is invalid validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/ref.json refs with quote object with strings is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo"bar' should be a number but is a string instead)"`;

exports[`tests/draft2020-12/ref.json refs with relative uris and defs invalid on inner field validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' has an invalid property ('bar' should be a string but is an integer instead))"`;

exports[`tests/draft2020-12/ref.json refs with relative uris and defs invalid on outer field validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json relative pointer ref to array mismatch array validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should be an integer but is a string instead)"`;

exports[`tests/draft2020-12/ref.json relative pointer ref to object mismatch validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be an integer but is a boolean instead)"`;

exports[`tests/draft2020-12/ref.json relative refs with absolute uris and defs invalid on inner field validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' has an invalid property ('bar' should be a string but is an integer instead))"`;

exports[`tests/draft2020-12/ref.json relative refs with absolute uris and defs invalid on outer field validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/ref.json remote ref, containing refs itself remote ref invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('minLength' should be greater than or equal to 0 but is -1 instead)"`;

exports[`tests/draft2020-12/ref.json root pointer ref mismatch validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is false)"`;

exports[`tests/draft2020-12/ref.json root pointer ref recursive mismatch validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' has an invalid property ('bar' should not be defined but is false))"`;

exports[`tests/draft2020-12/ref.json simple URN base URI with $ref via the URN invalid under the URN IDed schema validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be greater than or equal to 30 but is 12 instead)"`;

exports[`tests/draft2020-12/ref.json simple URN base URI with JSON pointer a non-string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/refRemote.json $ref to $ref finds detached $anchor non-number is invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/refRemote.json Location-independent identifier in remote ref string is invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/refRemote.json anchor within remote ref remote anchor invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/refRemote.json base URI change - change folder in subschema string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('list' has invalid item (item at 0 should be an integer but is a string instead))"`;

exports[`tests/draft2020-12/refRemote.json base URI change - change folder string is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('list' has invalid item (item at 0 should be an integer but is a string instead))"`;

exports[`tests/draft2020-12/refRemote.json base URI change base URI change ref invalid validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 has invalid item (item at 0 should be an integer but is a string instead))"`;

exports[`tests/draft2020-12/refRemote.json fragment within remote ref remote fragment invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/refRemote.json ref within remote ref ref within ref invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/refRemote.json remote HTTP ref with different $id number is invalid validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/refRemote.json remote HTTP ref with different URN $id number is invalid validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/refRemote.json remote HTTP ref with nested absolute ref number is invalid validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/refRemote.json remote ref remote ref invalid validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/refRemote.json remote ref with ref to defs invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/refRemote.json retrieved nested refs resolve relative to their URI not $id number is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('name' has an invalid property ('foo' should be a string but is an integer instead))"`;

exports[`tests/draft2020-12/refRemote.json root ref in remote ref object is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('name' should validate against any subschema)"`;

exports[`tests/draft2020-12/required.json required properties whose names are Javascript object property names __proto__ present validateJSON() returns correct error message 1`] = `"The value is missing 'toString' and 'constructor'"`;

exports[`tests/draft2020-12/required.json required properties whose names are Javascript object property names constructor present validateJSON() returns correct error message 1`] = `"The value is missing '__proto__' and 'toString'"`;

exports[`tests/draft2020-12/required.json required properties whose names are Javascript object property names none of the properties mentioned validateJSON() returns correct error message 1`] = `"The value is missing '__proto__', 'toString' and 'constructor'"`;

exports[`tests/draft2020-12/required.json required properties whose names are Javascript object property names toString present validateJSON() returns correct error message 1`] = `"The value is missing '__proto__' and 'constructor'"`;

exports[`tests/draft2020-12/required.json required validation non-present required property is invalid validateJSON() returns correct error message 1`] = `"The value is missing 'foo'"`;

exports[`tests/draft2020-12/required.json required with escaped characters object with some properties missing is invalid validateJSON() returns correct error message 1`] = `
"The value is missing 'foo\\bar', 'foo
bar', 'foo	bar' and 'foobar'"
`;

exports[`tests/draft2020-12/type.json array type matches arrays a boolean is not an array validateJSON() returns correct error message 1`] = `"The value should be an array but is a boolean instead"`;

exports[`tests/draft2020-12/type.json array type matches arrays a float is not an array validateJSON() returns correct error message 1`] = `"The value should be an array but is a number instead"`;

exports[`tests/draft2020-12/type.json array type matches arrays a string is not an array validateJSON() returns correct error message 1`] = `"The value should be an array but is a string instead"`;

exports[`tests/draft2020-12/type.json array type matches arrays an integer is not an array validateJSON() returns correct error message 1`] = `"The value should be an array but is an integer instead"`;

exports[`tests/draft2020-12/type.json array type matches arrays an object is not an array validateJSON() returns correct error message 1`] = `"The value should be an array but is an object instead"`;

exports[`tests/draft2020-12/type.json array type matches arrays null is not an array validateJSON() returns correct error message 1`] = `"The value should be an array but is null instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans a float is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is a number instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans a string is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is a string instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans an array is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is an array instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans an empty string is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is a string instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans an integer is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is an integer instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans an object is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is an object instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans null is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is null instead"`;

exports[`tests/draft2020-12/type.json boolean type matches booleans zero is not a boolean validateJSON() returns correct error message 1`] = `"The value should be a boolean but is an integer instead"`;

exports[`tests/draft2020-12/type.json integer type matches integers a boolean is not an integer validateJSON() returns correct error message 1`] = `"The value should be an integer but is a boolean instead"`;

exports[`tests/draft2020-12/type.json integer type matches integers a float is not an integer validateJSON() returns correct error message 1`] = `"The value should be an integer but is a number instead"`;

exports[`tests/draft2020-12/type.json integer type matches integers a string is not an integer validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/type.json integer type matches integers a string is still not an integer, even if it looks like one validateJSON() returns correct error message 1`] = `"The value should be an integer but is a string instead"`;

exports[`tests/draft2020-12/type.json integer type matches integers an array is not an integer validateJSON() returns correct error message 1`] = `"The value should be an integer but is an array instead"`;

exports[`tests/draft2020-12/type.json integer type matches integers an object is not an integer validateJSON() returns correct error message 1`] = `"The value should be an integer but is an object instead"`;

exports[`tests/draft2020-12/type.json integer type matches integers null is not an integer validateJSON() returns correct error message 1`] = `"The value should be an integer but is null instead"`;

exports[`tests/draft2020-12/type.json multiple types can be specified in an array a boolean is invalid validateJSON() returns correct error message 1`] = `"The value should be either an integer or a string but is a boolean instead"`;

exports[`tests/draft2020-12/type.json multiple types can be specified in an array a float is invalid validateJSON() returns correct error message 1`] = `"The value should be either an integer or a string but is a number instead"`;

exports[`tests/draft2020-12/type.json multiple types can be specified in an array an array is invalid validateJSON() returns correct error message 1`] = `"The value should be either an integer or a string but is an array instead"`;

exports[`tests/draft2020-12/type.json multiple types can be specified in an array an object is invalid validateJSON() returns correct error message 1`] = `"The value should be either an integer or a string but is an object instead"`;

exports[`tests/draft2020-12/type.json multiple types can be specified in an array null is invalid validateJSON() returns correct error message 1`] = `"The value should be either an integer or a string but is null instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object a float is not null validateJSON() returns correct error message 1`] = `"The value should be null but is a number instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object a string is not null validateJSON() returns correct error message 1`] = `"The value should be null but is a string instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object an array is not null validateJSON() returns correct error message 1`] = `"The value should be null but is an array instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object an empty string is not null validateJSON() returns correct error message 1`] = `"The value should be null but is a string instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object an integer is not null validateJSON() returns correct error message 1`] = `"The value should be null but is an integer instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object an object is not null validateJSON() returns correct error message 1`] = `"The value should be null but is an object instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object false is not null validateJSON() returns correct error message 1`] = `"The value should be null but is a boolean instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object true is not null validateJSON() returns correct error message 1`] = `"The value should be null but is a boolean instead"`;

exports[`tests/draft2020-12/type.json null type matches only the null object zero is not null validateJSON() returns correct error message 1`] = `"The value should be null but is an integer instead"`;

exports[`tests/draft2020-12/type.json number type matches numbers a boolean is not a number validateJSON() returns correct error message 1`] = `"The value should be a number but is a boolean instead"`;

exports[`tests/draft2020-12/type.json number type matches numbers a string is not a number validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/type.json number type matches numbers a string is still not a number, even if it looks like one validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/type.json number type matches numbers an array is not a number validateJSON() returns correct error message 1`] = `"The value should be a number but is an array instead"`;

exports[`tests/draft2020-12/type.json number type matches numbers an object is not a number validateJSON() returns correct error message 1`] = `"The value should be a number but is an object instead"`;

exports[`tests/draft2020-12/type.json number type matches numbers null is not a number validateJSON() returns correct error message 1`] = `"The value should be a number but is null instead"`;

exports[`tests/draft2020-12/type.json object type matches objects a boolean is not an object validateJSON() returns correct error message 1`] = `"The value should be an object but is a boolean instead"`;

exports[`tests/draft2020-12/type.json object type matches objects a float is not an object validateJSON() returns correct error message 1`] = `"The value should be an object but is a number instead"`;

exports[`tests/draft2020-12/type.json object type matches objects a string is not an object validateJSON() returns correct error message 1`] = `"The value should be an object but is a string instead"`;

exports[`tests/draft2020-12/type.json object type matches objects an array is not an object validateJSON() returns correct error message 1`] = `"The value should be an object but is an array instead"`;

exports[`tests/draft2020-12/type.json object type matches objects an integer is not an object validateJSON() returns correct error message 1`] = `"The value should be an object but is an integer instead"`;

exports[`tests/draft2020-12/type.json object type matches objects null is not an object validateJSON() returns correct error message 1`] = `"The value should be an object but is null instead"`;

exports[`tests/draft2020-12/type.json string type matches strings 1 is not a string validateJSON() returns correct error message 1`] = `"The value should be a string but is an integer instead"`;

exports[`tests/draft2020-12/type.json string type matches strings a boolean is not a string validateJSON() returns correct error message 1`] = `"The value should be a string but is a boolean instead"`;

exports[`tests/draft2020-12/type.json string type matches strings a float is not a string validateJSON() returns correct error message 1`] = `"The value should be a string but is a number instead"`;

exports[`tests/draft2020-12/type.json string type matches strings an array is not a string validateJSON() returns correct error message 1`] = `"The value should be a string but is an array instead"`;

exports[`tests/draft2020-12/type.json string type matches strings an object is not a string validateJSON() returns correct error message 1`] = `"The value should be a string but is an object instead"`;

exports[`tests/draft2020-12/type.json string type matches strings null is not a string validateJSON() returns correct error message 1`] = `"The value should be a string but is null instead"`;

exports[`tests/draft2020-12/type.json type as array with one item number is invalid validateJSON() returns correct error message 1`] = `"The value should be either a string but is an integer instead"`;

exports[`tests/draft2020-12/type.json type: array or object null is invalid validateJSON() returns correct error message 1`] = `"The value should be either an array or an object but is null instead"`;

exports[`tests/draft2020-12/type.json type: array or object number is invalid validateJSON() returns correct error message 1`] = `"The value should be either an array or an object but is an integer instead"`;

exports[`tests/draft2020-12/type.json type: array or object string is invalid validateJSON() returns correct error message 1`] = `"The value should be either an array or an object but is a string instead"`;

exports[`tests/draft2020-12/type.json type: array, object or null number is invalid validateJSON() returns correct error message 1`] = `"The value should be either an array, an object or null but is an integer instead"`;

exports[`tests/draft2020-12/type.json type: array, object or null string is invalid validateJSON() returns correct error message 1`] = `"The value should be either an array, an object or null but is a string instead"`;

exports[`tests/draft2020-12/unevaluatedItems.json item is evaluated in an uncle schema to unevaluatedItems uncle keyword evaluation is not significant validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' has invalid item (item at 1 should not be defined but is 'test'))"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems and contains interact to control item dependency relationship only a's and c's are invalid validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should not be defined but is 'c', item at 2 should not be defined but is 'c' and item at 4 should not be defined but is 'c')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems and contains interact to control item dependency relationship only b's and c's are invalid validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should not be defined but is 'c', item at 1 should not be defined but is 'b', item at 2 should not be defined but is 'c', item at 3 should not be defined but is 'b' and item at 4 should not be defined but is 'c')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems and contains interact to control item dependency relationship only b's are invalid validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should not be defined but is 'b' and item at 1 should not be defined but is 'b')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems and contains interact to control item dependency relationship only c's are invalid validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should not be defined but is 'c' and item at 1 should not be defined but is 'c')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems as schema with invalid unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should be a string but is an integer instead)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems can see annotations from if without then and else invalid in case if is evaluated validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should not be defined but is 'b')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems can't see inside cousins always fails validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems depends on adjacent contains contains fails, second item is not evaluated validateJSON() returns correct error message 1`] = `"The value should have an item that validates against subschema and has invalid item (item at 1 should not be defined but is 2)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems depends on adjacent contains contains passes, second item is not evaluated validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should not be defined but is 2)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems depends on multiple nested contains 7 not evaluated, fails unevaluatedItems validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 3 should be a multiple of 5 but is 7 instead)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems false with unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should not be defined but is 'foo')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with $ref with unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 2 should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with anyOf when one schema matches and has unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 2 should not be defined but is 42)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with anyOf when two schemas match and has unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 3 should not be defined but is 42)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with boolean schemas with unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should not be defined but is 'foo')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with if/then/else when if doesn't match and it has unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 4 should not be defined but is 42)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with if/then/else when if matches and it has unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 3 should not be defined but is 'else')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with items invalid under items validateJSON() returns correct error message 1`] = `"The value has invalid items (item at 0 should be a number but is a string instead, item at 1 should be a number but is a string instead and item at 2 should be a number but is a string instead)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with nested items with invalid additional item validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 0 should be a boolean but is a string instead)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with nested tuple with unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 2 should not be defined but is true)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with not with unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with oneOf with unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 2 should not be defined but is 42)"`;

exports[`tests/draft2020-12/unevaluatedItems.json unevaluatedItems with tuple with unevaluated items validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 1 should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json cousin unevaluatedProperties, true and false, false with properties with nested unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json cousin unevaluatedProperties, true and false, true with properties with nested unevaluated properties validateJSON() returns correct error message 1`] = `"The value has invalid properties ('foo' should not be defined but is 'foo' and 'bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json cousin unevaluatedProperties, true and false, true with properties with no nested unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 'foo')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs Empty is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs a + b is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and has invalid properties ('a' should not be defined but is 1 and 'b' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs a + c is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and has invalid properties ('a' should not be defined but is 1 and 'c' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs a + d is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and has invalid properties ('a' should not be defined but is 1 and 'd' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs all + a is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and has invalid properties ('all' should not be defined but is 1 and 'a' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs b + c is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none and has invalid properties ('b' should not be defined but is 1 and 'c' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs b + d is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none and has invalid properties ('b' should not be defined but is 1 and 'd' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs c + d is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none and has invalid properties ('c' should not be defined but is 1 and 'd' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs xx + a is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and has invalid properties ('xx' should not be defined but is 1 and 'a' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs xx + b is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none and has invalid properties ('xx' should not be defined but is 1 and 'b' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs xx + c is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none and has invalid properties ('xx' should not be defined but is 1 and 'c' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs xx + d is invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none and has invalid properties ('xx' should not be defined but is 1 and 'd' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json dynamic evalation inside nested refs xx + foo is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json in-place applicator siblings, allOf has unevaluated base case: both properties present validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json in-place applicator siblings, allOf has unevaluated in place applicator siblings, foo is missing validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json in-place applicator siblings, anyOf has unevaluated base case: both properties present validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/unevaluatedProperties.json in-place applicator siblings, anyOf has unevaluated in place applicator siblings, bar is missing validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/unevaluatedProperties.json nested unevaluatedProperties, outer true, inner false, properties inside with nested unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json nested unevaluatedProperties, outer true, inner false, properties outside with nested unevaluated properties validateJSON() returns correct error message 1`] = `"The value has invalid properties ('foo' should not be defined but is 'foo' and 'bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json nested unevaluatedProperties, outer true, inner false, properties outside with no nested unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 'foo')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json property is evaluated in an uncle schema to unevaluatedProperties uncle keyword evaluation is not significant validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' has an invalid property ('faz' should not be defined but is 'test'))"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties + ref inside allOf / oneOf Empty is invalid (no x or y) validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties + ref inside allOf / oneOf a and b and x and y are invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and has invalid properties ('a' should not be defined but is 1, 'b' should not be defined but is 1, 'x' should not be defined but is 1 and 'y' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties + ref inside allOf / oneOf a and b are invalid (no x or y) validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against none and has invalid properties ('a' should not be defined but is 1 and 'b' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties + ref inside allOf / oneOf x and y are invalid validateJSON() returns correct error message 1`] = `"The value should validate against exactly one subschema but validated against 2 and has invalid properties ('x' should not be defined but is 1 and 'y' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties + single cyclic ref Unevaluated on 1st level is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('y' should not be defined but is {})"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties + single cyclic ref Unevaluated on 2nd level is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('x' has an invalid property ('y' should not be defined but is {})) and has an invalid property ('x' should not be defined but is {"x":{},"y":{}})"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties + single cyclic ref Unevaluated on 3rd level is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('x' has an invalid property ('x' has an invalid property ('y' should not be defined but is {})) and has an invalid property ('x' should not be defined but is {"x":{},"y":{}})) and has an invalid property ('x' should not be defined but is {"x":{"x":{},"y":{}}})"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties can see annotations from if without then and else invalid in case if is evaluated validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'a')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties can't see inside cousins (reverse order) always fails validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties can't see inside cousins always fails validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 1)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties false with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 'foo')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties not affected by propertyNames string property is invalid validateJSON() returns correct error message 1`] = `"The value has an invalid property ('a' should be a number but is a string instead)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties schema with invalid unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should have at least 3 characters but has 2 instead)"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with $ref with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with adjacent patternProperties with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with adjacent properties with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with anyOf when one matches and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('baz' should not be defined but is 'not-baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with anyOf when two match and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('quux' should not be defined but is 'not-quux')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with boolean schemas with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with dependentSchemas with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else when if is false and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 'else')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else when if is true and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else, else not defined when if is false and has no unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else, else not defined when if is false and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has invalid properties ('foo' should not be defined but is 'else' and 'baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else, else not defined when if is true and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else, then not defined when if is false and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('foo' should not be defined but is 'else')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else, then not defined when if is true and has no unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with if/then/else, then not defined when if is true and has unevaluated properties validateJSON() returns correct error message 1`] = `"The value has invalid properties ('bar' should not be defined but is 'bar' and 'baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with nested patternProperties with additional properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with nested properties with additional properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('baz' should not be defined but is 'baz')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with not with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('bar' should not be defined but is 'bar')"`;

exports[`tests/draft2020-12/unevaluatedProperties.json unevaluatedProperties with oneOf with unevaluated properties validateJSON() returns correct error message 1`] = `"The value has an invalid property ('quux' should not be defined but is 'quux')"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique array of arrays is invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique array of integers is invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique array of more than two arrays is invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 2 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique array of more than two integers is invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 2 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique array of nested objects is invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique array of objects is invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique array of strings is invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 2 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation non-unique heterogeneous types are invalid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 4 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation numbers are unique if mathematically unequal validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal, items at 0 and 2 are equal and items at 1 and 2 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation objects are non-unique despite key order validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems validation property order of array of objects is ignored validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems with an array of items [false, false] from items array is not valid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems with an array of items [true, true] from items array is not valid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems with an array of items and additionalItems=false [false, false] from items array is not valid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems with an array of items and additionalItems=false [true, true] from items array is not valid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 0 and 1 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems with an array of items and additionalItems=false extra items are invalid even if unique validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 2 should not be defined but is null)"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems with an array of items non-unique array extended from [false, true] is not valid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 2 and 3 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems with an array of items non-unique array extended from [true, false] is not valid validateJSON() returns correct error message 1`] = `"The value should have unique items but items at 2 and 3 are equal instead"`;

exports[`tests/draft2020-12/uniqueItems.json uniqueItems=false with an array of items and additionalItems=false extra items are invalid even if unique validateJSON() returns correct error message 1`] = `"The value has invalid item (item at 2 should not be defined but is null)"`;

exports[`tests/draft2020-12/unknownKeyword.json $id inside an unknown keyword is not a real identifier type matches non-schema in first anyOf validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/unknownKeyword.json $id inside an unknown keyword is not a real identifier type matches non-schema in third anyOf validateJSON() returns correct error message 1`] = `"The value should validate against any subschema"`;

exports[`tests/draft2020-12/vocabulary.json ignore unrecognized optional vocabulary string value validateJSON() returns correct error message 1`] = `"The value should be a number but is a string instead"`;

exports[`tests/draft2020-12/vocabulary.json schema that uses custom metaschema with with no validation vocabulary applicator vocabulary still works validateJSON() returns correct error message 1`] = `"The value has an invalid property ('badProperty' should not be defined but is 'this property should not exist')"`;
